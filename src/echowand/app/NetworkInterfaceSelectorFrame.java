package echowand.app;

import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author Yoshiki Makino
 */
public class NetworkInterfaceSelectorFrame extends javax.swing.JFrame {
    
    private class NetworkInterfaceListModel extends DefaultListModel {
        private LinkedList<NetworkInterface> networkInterfaces = new LinkedList<NetworkInterface>();
        
        public NetworkInterfaceListModel(LinkedList<NetworkInterface> networkInterfaces) {
            this.networkInterfaces = networkInterfaces;
        }

        @Override
        public int getSize() {
            return networkInterfaces.size();
        }

        @Override
        public Object getElementAt(int index) {
            NetworkInterface ni = networkInterfaces.get(index);
            String name =ni.getName();
            String displayName = ni.getDisplayName();
            
            String label = name;
            
            if (!name.equals(displayName)) {
                label = label + ": " + displayName;
            }
            
            return label;
        }
        
        public NetworkInterface getNetworkInterface(int index) {
            return networkInterfaces.get(index);
        }
    }
    
    private NetworkInterfaceListModel model;
    private NetworkInterface selectedInterface = null;
    private boolean closed = false;

    /**
     * Creates new form NetworkInterfaceSelectorFrame
     */
    public NetworkInterfaceSelectorFrame() {
        initComponents();
        LinkedList<NetworkInterface> networkInterfaces = new LinkedList<NetworkInterface>();
            
        try {
            Enumeration<NetworkInterface> nis =  NetworkInterface.getNetworkInterfaces();
            while (nis.hasMoreElements()) {
                NetworkInterface ni = nis.nextElement();
                if (ni.isUp()) {
                    networkInterfaces.add(ni);
                }
            }
            
            model = new NetworkInterfaceListModel(networkInterfaces);
            interfaceList.setModel(model);
            interfaceList.setSelectedIndex(0);
        } catch (SocketException ex) {
            Logger.getLogger(NetworkInterfaceSelectorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        interfaceList = new javax.swing.JList();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Network Interface Selector");
        getContentPane().setLayout(new java.awt.BorderLayout());

        interfaceList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        interfaceList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        interfaceList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                interfaceListMouseClicked(evt);
            }
        });
        interfaceList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                interfaceListKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(interfaceList);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        getContentPane().add(okButton, java.awt.BorderLayout.PAGE_END);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        close();
    }//GEN-LAST:event_okButtonActionPerformed

    private void interfaceListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_interfaceListMouseClicked
        if (evt.getClickCount() > 1) {
            close();
        }
    }//GEN-LAST:event_interfaceListMouseClicked

    private void interfaceListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_interfaceListKeyReleased
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            close();
        }
    }//GEN-LAST:event_interfaceListKeyReleased

    public void close() {
        int index = interfaceList.getSelectedIndex();
        
        if (index >= 0) {
            selectedInterface = model.getNetworkInterface(index);
        }
        
        synchronized (this) {
            closed = true;
            notifyAll();
        }
        
        this.dispose();
    }
    
    public synchronized void join() {
        while (!closed) {
            try {
                wait();
            } catch (InterruptedException ex) {
                Logger.getLogger(NetworkInterfaceSelectorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public NetworkInterface getSelectedInterface() {
        return selectedInterface;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NetworkInterfaceSelectorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NetworkInterfaceSelectorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NetworkInterfaceSelectorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NetworkInterfaceSelectorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NetworkInterfaceSelectorFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList interfaceList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
